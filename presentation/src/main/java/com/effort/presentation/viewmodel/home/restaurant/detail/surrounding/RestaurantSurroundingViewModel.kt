package com.effort.presentation.viewmodel.home.restaurant.detail.surrounding

import android.util.Log
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.effort.domain.DataResource
import com.effort.domain.usecase.home.restaurant.detail.subway.GetSubwayStationUseCase
import com.effort.domain.usecase.home.restaurant.detail.weather.GetWeatherDataUseCase
import com.effort.presentation.R
import com.effort.presentation.UiState
import com.effort.presentation.core.util.setLoadingState
import com.effort.presentation.core.util.toUiStateList
import com.effort.presentation.model.home.restaurant.detail.subway.SubwayModel
import com.effort.presentation.model.home.restaurant.detail.subway.toPresentation
import com.effort.presentation.model.home.restaurant.detail.weather.WeatherModel
import com.effort.presentation.model.home.restaurant.detail.weather.toPresentation
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.launch
import javax.inject.Inject

@HiltViewModel
class RestaurantSurroundingViewModel @Inject constructor(
    private val getWeatherDataUseCase: GetWeatherDataUseCase,
    private val getSubwayStationUseCase: GetSubwayStationUseCase,
) : ViewModel() {

    private val _getWeatherState = MutableStateFlow<UiState<List<WeatherModel>>>(UiState.Empty)
    val getWeatherState get() = _getWeatherState.asStateFlow()

    private val _getSubwayStationState = MutableStateFlow<UiState<List<SubwayModel>>>(UiState.Empty)
    val getSubwayStationState get() = _getSubwayStationState.asStateFlow()

    /**
     * ÌòÑÏû¨ ÏúÑÏπò(ÏúÑÎèÑ, Í≤ΩÎèÑ)Î•º Í∏∞Î∞òÏúºÎ°ú ÎÇ†Ïî® Îç∞Ïù¥ÌÑ∞Î•º Í∞ÄÏ†∏Ïò®Îã§.
     * - `latitude`, `longitude`Î•º Í∏∞Ï§ÄÏúºÎ°ú API ÏöîÏ≤≠ÏùÑ ÏàòÌñâ
     * - ÎÇ†Ïî® Îç∞Ïù¥ÌÑ∞Î•º `WeatherModel`Î°ú Î≥ÄÌôò ÌõÑ UI ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
     *
     * @param latitude ÏúÑÎèÑ
     * @param longitude Í≤ΩÎèÑ
     */
    fun fetchWeatherData(latitude: String, longitude: String) {
        setLoadingState(_getWeatherState)

        viewModelScope.launch {
            try {
                _getWeatherState.value =
                    when (val dataResource = getWeatherDataUseCase(latitude, longitude)) {
                        is DataResource.Success -> {
                            val weatherData = dataResource.data.map { it.toPresentation() }
                                .map { it.copy(weatherIcon = getWeatherIcon(it.id)) }
                            UiState.Success(weatherData)
                        }
                        is DataResource.Error -> UiState.Error(dataResource.throwable)
                        is DataResource.Loading -> UiState.Loading
                    }

                val dataResource = getWeatherDataUseCase(latitude, longitude)
                _getWeatherState.value = dataResource.toUiStateList { it.toPresentation() }
            } catch (e: Exception) {
                _getWeatherState.value = UiState.Error(e)
            }
        }
    }

    /**
     * ÌòÑÏû¨ ÏúÑÏπò(ÏúÑÎèÑ, Í≤ΩÎèÑ)Î•º Í∏∞Î∞òÏúºÎ°ú Ï£ºÎ≥Ä ÏßÄÌïòÏ≤†Ïó≠ Ï†ïÎ≥¥Î•º Í∞ÄÏ†∏Ïò®Îã§.
     * - `latitude`, `longitude`Î•º Í∏∞Ï§ÄÏúºÎ°ú API ÏöîÏ≤≠ ÏàòÌñâ
     * - Îç∞Ïù¥ÌÑ∞Í∞Ä Ï°¥Ïû¨ÌïòÎ©¥ `UiState.Success`, ÏóÜÏúºÎ©¥ `UiState.Empty`
     *
     * @param latitude ÏúÑÎèÑ
     * @param longitude Í≤ΩÎèÑ
     */
    fun fetchSubwayStation(latitude: String, longitude: String) {
        Log.d("SubwayViewModel", "fetchSubwayStation Ìò∏Ï∂úÎê®: ÏúÑÎèÑ=$latitude, Í≤ΩÎèÑ=$longitude")

        setLoadingState(_getSubwayStationState)

        viewModelScope.launch {
            try {
                _getSubwayStationState.value =
                    when (val dataResource = getSubwayStationUseCase(latitude, longitude)) {
                        is DataResource.Success -> {
                            val subwayStation = dataResource.data.map { it.toPresentation() }
                            Log.d("SubwayViewModel", "API ÏÑ±Í≥µ: Î∞õÏùÄ Îç∞Ïù¥ÌÑ∞ Í∞úÏàò = ${subwayStation.size}")
                            if (subwayStation.isEmpty()) UiState.Empty else UiState.Success(subwayStation)
                        }
                        is DataResource.Error -> {
                            Log.e("SubwayViewModel", "API ÏóêÎü¨ Î∞úÏÉù", dataResource.throwable)
                            UiState.Error(dataResource.throwable)
                        }
                        is DataResource.Loading -> {
                            Log.d("SubwayViewModel", "Îç∞Ïù¥ÌÑ∞ Î°úÎî© Ï§ë...")
                            UiState.Loading
                        }
                    }
            } catch (e: Exception) {
                Log.e("SubwayViewModel", "fetchSubwayStation() ÏòàÏô∏ Î∞úÏÉù", e)
                _getSubwayStationState.value = UiState.Error(e)
            }
        }
    }

    /**
     * ÎÇ†Ïî® ÏÉÅÌÉú ÏΩîÎìúÏóê Îî∞Îùº ÏïÑÏù¥ÏΩòÏùÑ Î∞òÌôòÌïúÎã§.
     *
     * @param weatherId OpenWeatherMap Í∏∞Ï§Ä ÎÇ†Ïî® ID
     * @return Ìï¥Îãπ ÎÇ†Ïî®Ïóê ÎßûÎäî ÏïÑÏù¥ÏΩò Î¶¨ÏÜåÏä§ ID
     */
    private fun getWeatherIcon(weatherId: Int): Int {
        return when (weatherId) {
            in 200..232 -> R.drawable.ic_thunderstorm // üå©Ô∏è ÎáåÏö∞
            in 300..531 -> R.drawable.ic_rainy // üåßÔ∏è ÎπÑ
            in 600..622 -> R.drawable.ic_snowing // ‚ùÑÔ∏è Îàà
            in 701..781 -> R.drawable.ic_foggy // üå´Ô∏è ÏïàÍ∞ú + Ìô©ÏÇ¨
            800 -> R.drawable.ic_sunny // ‚òÄÔ∏è ÎßëÏùå
            in 801..802 -> R.drawable.ic_partly_cloudy // üå§Ô∏è Íµ¨Î¶Ñ Ï°∞Í∏à
            in 803..804 -> R.drawable.ic_cloudy // ‚òÅÔ∏è ÌùêÎ¶º
            else -> R.drawable.ic_cloudy // ‚ùì Í∏∞Î≥∏Í∞í: ÌùêÎ¶º
        }
    }
}